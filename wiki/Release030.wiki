WrapITK release page for version 0.3.0.

= Introduction =

For the first time since its integration in ITK, WrapITK is releasing a new version. This is the result of hard work to enhance the whole wrapping process, the class coverage, the target languages integration and the user experience.

= Wrapping process enhancements =

  * native swig;
  * full separation of types declaration and code generation;
  * code generation based on callback macros.

= Class coverage =

= Target languages changes =

Even if most of the changes are focused on python, all the target languages have some differences since the last version.

== Python ==

=== No SmartPointers anymore ===

SmartPointers are not wrapped anymore in python. There are several consequences:
  * Binary are about 50% smaller than before;
  * Load time is greatly decreased;
  * GetPointer() is no more needed, to pass a smart pointed object to a function which require a super class of the object. GetPointer() is still available for backward compatibility but display a warning when used. It should disappear in one of the next release;

=== No optional patch -- the features are available by default ===

In previous versions, python integration was enhanced by patching ITK code. The integration is now made with the standard swig mechanisms and doesn't require any patch. Everything is there by default.

=== No unusable std::basic_string anymore ===

Many methods were not usable in python because the were requiring std::basic_string instead of std::string. Several users have reported that problem when trying to use dicom reader from python. All those methods are now plainly usable.

=== Better repr() for simple types ===

Even with optional patches, it was quite difficult to read the content of simple types like itk::Index. The simplest way to do that (with optional patch) was to make a print â€” repr was the standard swig one:
{{{
>>> print idx
[0, 0, 0]
>>> idx
<C itk::Index<(3u)> instance at _401df009_p_itk__IndexT3u_t>
}}}
repr is now much better:
{{{
>>> idx
itkIndex3([0, 0, 0])
}}}
and makes useless the use of the print command in the interpreter.

=== Casting ===

All the subclasses of LightObject now provide a cast() static method which let the user convert objects at run time.
{{{
>>> median = itk.MedianImageFilter.IUS3IUS3.New()
>>> obj = itk.LightObject.cast(median)
>>> obj
<ITKCommonBasePython.itkLightObject; proxy of <Swig Object of type 'itkLightObject *' at 0xa5f4990> >
>>> itk.ImageSource.IUS3.cast(obj)
<itkImageSourcePython.itkImageSourceIUS3; proxy of <Swig Object of type 'itkImageSourceIUS3 *' at 0xa5f4990> >
}}}
Additionnaly, itk module provides the down_cast() which automatically cast the object to the most specialized know type:
{{{
>>> itk.down_cast(obj)
<itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3; proxy of <Swig Object of type 'itkMedianImageFilterIUS3IUS3 *' at 0xa5f4990> >
}}}

=== `[]` is a better GetOutput() ===

Up to now, the user had to use GetOutput() to get the images produced by a filter. However, the GetOutput() method is not bounded (one can use it with a higher value than the actual number of outputs in that filter. GetOutput() also produce a non casted output and may fail to give a valid if the outputs of the filter are of different types.

The `[]` notation check the bounds, cast the output to its real type, and also accept the slice notation.
{{{
>>> dmap = itk.DanielssonDistanceMapImageFilter.IUS3IF3.New()
>>> dmap[0]
<itkImagePython.itkImageF3; proxy of <Swig Object of type 'itkImageF3 *' at 0xacd0718> >
>>> dmap[10]
IndexError: index out of range
>>> dmap[:]
[<itkImagePython.itkImageF3; proxy of <Swig Object of type 'itkImageF3 *' at 0xacd0718> >,
 <itkImagePython.itkImageF3; proxy of <Swig Object of type 'itkImageF3 *' at 0xacd0508> >,
 <itkImagePython.itkImageO33; proxy of <Swig Object of type 'itkImageO33 *' at 0xacd0918> >]
}}}

=== () is a better UpdateLargestPossibleRegion() ===

=== Doc integration ===


== Java ==

=== No SmartPointers anymore ===


== Tcl ==

== New languages ==

= Supported platforms =

WrapITK is tested on the following platforms:

  * Mac OS X 10.5 Intel
  * GNU/Linux
  * OpenSolaris
  * Microsoft Windows

It may also work on other platforms, but has not been tested yet.

= Known issues =

  * Because of swig bug #2583160, python modules can't be loaded with python 2.6 when built with swig 1.3.37 or 1.3.38;
  * Because of swig bug #2552048, python generated doc doesn't contain method signature when built with swig 1.3.37;
  * BinaryDilateImageFilter has no SetKernel() method in Tcl. No know reason yet. Other classes may be affected.

= Binary downloads and installation =

= Source downloads and build =

= Bug reports =