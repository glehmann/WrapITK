
###############################################################################
# the macros in charge of dispatching to the language specific macros

MACRO(WRAP_MODULES_ALL_LANGUAGES)
#!  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
#!    INIT_WRAP_LIBRARY_JAVA()
#!  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)

  IF(WRAP_ITK_PYTHON)
    WRAP_MODULES_PYTHON()
  ENDIF(WRAP_ITK_PYTHON)  
ENDMACRO(WRAP_MODULES_ALL_LANGUAGES)

MACRO(END_WRAP_MODULES_ALL_LANGUAGES)
  IF(WRAP_ITK_PYTHON)
    END_WRAP_MODULES_PYTHON()
  ENDIF(WRAP_ITK_PYTHON)  
  IF(WRAP_ITK_DOC)
    END_WRAP_MODULES_DOC()
  ENDIF(WRAP_ITK_DOC)  
ENDMACRO(END_WRAP_MODULES_ALL_LANGUAGES)


MACRO(WRAP_LIBRARY_ALL_LANGUAGES library_name)
  IF(WRAP_ITK_GCCXML)
    WRAP_LIBRARY_CABLE_SWIG("${library_name}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    WRAP_LIBRARY_SWIG_INTERFACE("${library_name}")
  ENDIF(WRAP_ITK_SWIGINTERFACE)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    WRAP_LIBRARY_PYTHON("${library_name}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    WRAP_LIBRARY_JAVA("${library_name}")
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(WRAP_LIBRARY_ALL_LANGUAGES)

MACRO(END_WRAP_LIBRARY_ALL_LANGUAGES)
  IF(WRAP_ITK_GCCXML)
    END_WRAP_LIBRARY_CABLE_SWIG()
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    END_WRAP_LIBRARY_SWIG_INTERFACE()
  ENDIF(WRAP_ITK_SWIGINTERFACE)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    END_WRAP_LIBRARY_PYTHON()
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    END_WRAP_LIBRARY_JAVA()
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(END_WRAP_LIBRARY_ALL_LANGUAGES)


MACRO(INCLUDE_WRAP_CMAKE_ALL_LANGUAGES module)
  IF(WRAP_ITK_GCCXML)
    INCLUDE_WRAP_CMAKE_CABLE_SWIG("${module}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    INCLUDE_WRAP_CMAKE_SWIG_INTERFACE("${module}")
  ENDIF(WRAP_ITK_SWIGINTERFACE)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    INCLUDE_WRAP_CMAKE_PYTHON("${module}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    INCLUDE_WRAP_CMAKE_JAVA("${module}")
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(INCLUDE_WRAP_CMAKE_ALL_LANGUAGES)

MACRO(END_INCLUDE_WRAP_CMAKE_ALL_LANGUAGES module)
  IF(WRAP_ITK_GCCXML)
    END_INCLUDE_WRAP_CMAKE_CABLE_SWIG("${module}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    END_INCLUDE_WRAP_CMAKE_SWIG_INTERFACE("${module}")
  ENDIF(WRAP_ITK_SWIGINTERFACE)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    END_INCLUDE_WRAP_CMAKE_PYTHON("${module}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    END_INCLUDE_WRAP_CMAKE_JAVA("${module}")
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(END_INCLUDE_WRAP_CMAKE_ALL_LANGUAGES)


MACRO(WRAP_CLASS_ALL_LANGUAGES class)
ENDMACRO(WRAP_CLASS_ALL_LANGUAGES)

MACRO(WRAP_NAMED_CLASS_ALL_LANGUAGES class swig_name)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    WRAP_NAMED_CLASS_PYTHON("${class}" "${swig_name}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_DOC AND WRAPPER_LIBRARY_DOC)
    WRAP_NAMED_CLASS_DOC("${class}" "${swig_name}")
  ENDIF(WRAP_ITK_DOC AND WRAPPER_LIBRARY_DOC)
ENDMACRO(WRAP_NAMED_CLASS_ALL_LANGUAGES class swig_name)

MACRO(END_WRAP_CLASS_ALL_LANGUAGES)
ENDMACRO(END_WRAP_CLASS_ALL_LANGUAGES)


MACRO(WRAP_NON_TEMPLATE_CLASS_ALL_LANGUAGES class)
ENDMACRO(WRAP_NON_TEMPLATE_CLASS_ALL_LANGUAGES class)


MACRO(WRAP_INCLUDE_ALL_LANGUAGES inc)
  IF(WRAP_ITK_GCCXML)
    WRAP_INCLUDE_CABLE_SWIG("${inc}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    WRAP_INCLUDE_SWIG_INTERFACE("${inc}")
  ENDIF(WRAP_ITK_SWIGINTERFACE)
ENDMACRO(WRAP_INCLUDE_ALL_LANGUAGES inc)

MACRO(WRAP_TEMPLATE_ALL_LANGUAGES name types)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    WRAP_TEMPLATE_PYTHON("${name}" "${types}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
ENDMACRO(WRAP_TEMPLATE_ALL_LANGUAGES)


MACRO(ADD_ONE_TYPEDEF_ALL_LANGUAGES wrap_method wrap_class swig_name template_params)
  IF(WRAP_ITK_GCCXML)
    ADD_ONE_TYPEDEF_CABLE_SWIG("${wrap_method}" "${wrap_class}" "${swig_name}" "${template_params}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_SWIGINTERFACE)
    ADD_ONE_TYPEDEF_SWIG_INTERFACE("${wrap_method}" "${wrap_class}" "${swig_name}" "${template_params}")
  ENDIF(WRAP_ITK_SWIGINTERFACE)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    ADD_ONE_TYPEDEF_PYTHON("${wrap_method}" "${wrap_class}" "${swig_name}" "${template_params}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    ADD_ONE_TYPEDEF_JAVA("${wrap_method}" "${wrap_class}" "${swig_name}" "${template_params}")
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(ADD_ONE_TYPEDEF_ALL_LANGUAGES)


MACRO(ADD_SIMPLE_TYPEDEF_ALL_LANGUAGES wrap_class swig_name)
  IF(WRAP_ITK_GCCXML)
    ADD_SIMPLE_TYPEDEF_CABLE_SWIG("${wrap_class}" "${swig_name}")
  ENDIF(WRAP_ITK_GCCXML)
  IF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
    ADD_SIMPLE_TYPEDEF_PYTHON("${wrap_class}" "${swig_name}")
  ENDIF(WRAP_ITK_PYTHON AND WRAPPER_LIBRARY_PYTHON)
  IF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
    ADD_SIMPLE_TYPEDEF_JAVA("${wrap_class}" "${swig_name}")
  ENDIF(WRAP_ITK_JAVA AND WRAPPER_LIBRARY_JAVA)
ENDMACRO(ADD_SIMPLE_TYPEDEF_ALL_LANGUAGES wrap_class swig_name)




###############################################################################
# build the languages list

# set some of them to on by default
OPTION(WRAP_ITK_GCCXML "Build gccxml files." ON)
OPTION(WRAP_ITK_SWIGINTERFACE "Build swig interfaces." ON)

SET(WRAP_ITK_LANGUAGES CACHE INTERNAL "Internal languages list.")
FILE(GLOB local_files *)
FOREACH(f ${local_files})
  FILE(RELATIVE_PATH lang "${CMAKE_CURRENT_SOURCE_DIR}" "${f}")
  IF(IS_DIRECTORY "${f}" AND NOT "${lang}" MATCHES "CVS" AND NOT "${lang}" MATCHES ".svn")
    STRING(TOUPPER "${lang}" lang_upper)
    
    # add the language to the options
    OPTION(WRAP_ITK_${lang_upper} "Build swig ${lang} wrapper support." OFF)
    
    # add the language to the list, if the user have turn it on, and include
    # the subdirectory
    IF(WRAP_ITK_${lang_upper})
      SET(WRAP_ITK_LANGUAGES ${WRAP_ITK_LANGUAGES} "${lang}")
      ADD_SUBDIRECTORY("${lang}")
      GET_DIRECTORY_PROPERTY(inc DIRECTORY "${lang}" INCLUDE_DIRECTORIES)
      INCLUDE_DIRECTORIES(${inc})
    ENDIF(WRAP_ITK_${lang_upper})
  ENDIF(IS_DIRECTORY "${f}" AND NOT "${lang}" MATCHES "CVS" AND NOT "${lang}" MATCHES ".svn")
ENDFOREACH(f)
SET(WRAP_ITK_LANGUAGES ${WRAP_ITK_LANGUAGES} CACHE INTERNAL "Internal languages list.")

# MESSAGE("WRAP_ITK_LANGUAGES: ${WRAP_ITK_LANGUAGES}")

IF(NOT EXTERNAL_WRAP_ITK_PROJECT)
  INSTALL(FILES CMakeLists.txt itk.i
    DESTINATION "${WRAP_ITK_INSTALL_PREFIX}/Configuration/Languages"
  )
ENDIF(NOT EXTERNAL_WRAP_ITK_PROJECT)
